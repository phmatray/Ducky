using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Ducky.Generator.Core;

/// <summary>
/// Represents a generated source code file.
/// </summary>
public abstract class GeneratedSource
{
    private string? _cachedSource;

    /// <summary>
    /// Gets the indented string builder used for code generation.
    /// </summary>
    protected IndentedStringBuilder Builder { get; } = new();

    /// <summary>
    /// Performs pre-build tasks such as appending common header comments.
    /// Override this method to inject common code elements.
    /// </summary>
    protected virtual void PreBuild()
    {
        Builder.AppendLine("// <auto-generated/>");
    }

    /// <summary>
    /// Builds the generated code using the <see cref="IndentedStringBuilder"/>.
    /// Implementations should append code lines, manage indentation, etc.
    /// </summary>
    protected abstract void Build();

    /// <summary>
    /// Ensures that the generated source is built only once.
    /// </summary>
    private void EnsureBuilt()
    {
        if (_cachedSource is not null)
        {
            return;
        }

        PreBuild();
        Build();

        // Finalize the source code generation.
        _cachedSource = Builder.ToString();
    }

    /// <summary>
    /// Returns the generated source code as a string.
    /// </summary>
    public override string ToString()
    {
        EnsureBuilt();
        return _cachedSource!; // _cachedSource is guaranteed to be non-null after EnsureBuilt.
    }

    /// <summary>
    /// Returns the generated source code as a <see cref="SourceText"/>.
    /// </summary>
    /// <param name="encoding">The text encoding to use (defaults to UTF8).</param>
    public virtual SourceText ToSourceText(Encoding? encoding = null)
    {
        EnsureBuilt();
        encoding ??= Encoding.UTF8;
        return SourceText.From(_cachedSource!, encoding);
    }
}
