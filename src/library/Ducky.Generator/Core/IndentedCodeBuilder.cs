using System;

namespace Ducky.Generator.Core;

/// <summary>
/// A thin wrapper over <see cref="IndentedStringBuilder" /> that adds indentation to each line built.
/// </summary>
public class IndentedCodeBuilder
{
    private readonly IndentedStringBuilder _stringBuilder = new(0, 4);

    /// <summary>
    /// Appends a line of code to the builder.
    /// </summary>
    /// <param name="line">The line of code to append.</param>
    public void Line(string line)
    {
        _stringBuilder.AppendLine(line);
    }

    /// <summary>
    /// Appends an empty line to the builder.
    /// </summary>
    public void EmptyLine()
    {
        _stringBuilder.AppendLine(string.Empty);
    }

    /// <summary>
    /// Appends a comment to the builder.
    /// </summary>
    /// <param name="comment">The comment to append.</param>
    public void Comment(string comment)
    {
        _stringBuilder.AppendLine($"// {comment}");
    }

    /// <summary>
    /// Appends auto-generated comments to the builder.
    /// </summary>
    public void CommentAutoGenerated()
    {
        Comment("<auto-generated />");
        Comment("This file is auto-generated by Ducky.");
        EmptyLine();
    }

    /// <summary>
    /// Increases the indentation level for the appended lines.
    /// </summary>
    /// <returns>An <see cref="IDisposable"/> that, when disposed, will decrease the indentation level.</returns>
    public IDisposable Indent()
    {
        return _stringBuilder.Indent();
    }

    /// <summary>
    /// Appends a block of code indented by the current level.
    /// </summary>
    /// <param name="action">The action that generates the code inside the block.</param>
    public void Indent(Action action)
    {
        using (Indent())
        {
            action();
        }
    }

    /// <summary>
    /// Appends a block of code enclosed in braces.
    /// </summary>
    /// <param name="action">The action that generates the code inside the braces.</param>
    /// <param name="suffix">An optional suffix to append after the closing brace.</param>
    public void Braces(Action action, string suffix = "")
    {
        _stringBuilder.AppendLine("{");

        using (Indent())
        {
            action();
        }

        _stringBuilder.AppendLine("}" + suffix);
    }

    /// <summary>
    /// Appends a summary comment to the builder.
    /// </summary>
    /// <param name="summary">The summary text.</param>
    public void Summary(string summary)
    {
        Line("/// <summary>");
        Line($"/// {summary}");
        Line("/// </summary>");
    }

    /// <summary>
    /// Appends a summary comment for a parameter to the builder.
    /// </summary>
    /// <param name="paramName">The name of the parameter.</param>
    /// <param name="description">The description of the parameter.</param>
    public void SummaryParam(string paramName, string description)
    {
        Line($"/// <param name=\"{paramName}\">{description}</param>");
    }

    /// <summary>
    /// Returns the built code as a string.
    /// </summary>
    /// <returns>The built code.</returns>
    public override string ToString()
    {
        return _stringBuilder.ToString();
    }
}
