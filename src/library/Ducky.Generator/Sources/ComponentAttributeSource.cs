using System.Text;
using Microsoft.CodeAnalysis.Text;

namespace Ducky.Generator.Sources;

/// <summary>
/// Represents the generated source for the DuckyComponent attribute.
/// </summary>
/// <param name="generatorNamespace">The namespace for the generated code.</param>
/// <param name="attributeName">The name of the attribute.</param>
public class ComponentAttributeSource(
    string generatorNamespace,
    string attributeName)
{
    /// <summary>
    /// Converts the source to a SourceText instance.
    /// </summary>
    /// <returns>The generated source as SourceText.</returns>
    public SourceText ToSourceText()
    {
        StringBuilder sb = new();

        // Auto-generated header
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("#nullable enable");
        sb.AppendLine();

        sb.AppendLine($"namespace {generatorNamespace}");
        sb.AppendLine("{");
        sb.AppendLine("    /// <summary>");
        sb.AppendLine("    /// An attribute that marks a state slice for component base class generation.");
        sb.AppendLine("    /// </summary>");
        sb.AppendLine("    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct)]");
        sb.AppendLine($"    public class {attributeName} : System.Attribute");
        sb.AppendLine("    {");
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets or sets the name of the component base class to generate.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? ComponentName { get; set; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets or sets the root state type name (e.g., 'AppState').");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? RootStateType { get; set; }");
        sb.AppendLine();
        sb.AppendLine("        /// <summary>");
        sb.AppendLine("        /// Gets or sets the property path to access this state slice in the root state.");
        sb.AppendLine("        /// </summary>");
        sb.AppendLine("        public string? StateSliceProperty { get; set; }");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        return SourceText.From(sb.ToString(), Encoding.UTF8);
    }
}
