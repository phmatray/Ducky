@page "/generator/reducer"
@using Ducky.Generator.Core
@inject ReducerGenerator Generator
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<PageTitle>Reducer Generator - Ducky Code Generator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <!-- Header with Breadcrumbs -->
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <MudGrid>
        <!-- Configuration Panel -->
        <MudItem xs="12" md="5">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h5" GutterBottom="true">
                    <MudIcon Icon="@Icons.Material.Filled.Transform" Class="mr-2" />
                    Reducer Generator
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" GutterBottom="true">
                    Generate strongly-typed reducers for your Ducky state management with action handling.
                </MudText>
                
                <MudDivider Class="my-4" />
                
                <MudForm @ref="_form" @bind-IsValid="@_isValid">
                    <MudStack Spacing="3">
                        <!-- Basic Configuration -->
                        <MudTextField @bind-Value="_options.Namespace" 
                                      Label="Namespace" 
                                      Variant="Variant.Outlined"
                                      HelperText="The C# namespace for your reducers"
                                      Required="true" />
                        
                        <!-- Reducers List -->
                        <MudText Typo="Typo.h6" Class="mt-4">Reducers</MudText>
                        
                        @foreach (var reducer in _options.Reducers)
                        {
                            <MudCard Outlined="true" Class="pa-3">
                                <MudStack>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudTextField Value="@GetReducerClassNameWrapper(reducer)" 
                                                      ValueChanged="@((string value) => UpdateReducerClassName(reducer, value))"
                                                      Label="Reducer Class Name" 
                                                      Variant="Variant.Outlined"
                                                      Style="flex: 1;"
                                                      Required="true" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       title="Remove Reducer"
                                                       OnClick="@(() => RemoveReducer(reducer))" />
                                    </MudStack>
                                    
                                    <MudTextField Value="@GetStateTypeWrapper(reducer)" 
                                                  ValueChanged="@((string value) => UpdateStateType(reducer, value))"
                                                  Label="State Type" 
                                                  Variant="Variant.Outlined"
                                                  HelperText="The state type this reducer handles (e.g., TodoState, CounterState)"
                                                  Required="true" />
                                    
                                    <!-- Actions -->
                                    <MudText Typo="Typo.subtitle2">Handled Actions</MudText>
                                    @foreach (var action in reducer.Actions.ToList())
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudTextField Value="@action" 
                                                          Label="Action Type" 
                                                          Variant="Variant.Outlined"
                                                          Style="flex: 1;"
                                                          ReadOnly="true" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                                           Color="Color.Error" 
                                                           Size="Size.Small"
                                                           OnClick="@(() => RemoveAction(reducer, action))" />
                                        </MudStack>
                                    }
                                    
                                    <MudStack Row="true" Spacing="2">
                                        <MudTextField @bind-Value="_newActionName" 
                                                      Label="New Action Type" 
                                                      Variant="Variant.Outlined"
                                                      Style="flex: 1;"
                                                      Placeholder="e.g., AddTodoAction"
                                                      @onkeypress="@((e) => { if (e.Key == "Enter") AddAction(reducer); })" />
                                        <MudButton Variant="Variant.Text" 
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   Size="Size.Small"
                                                   Disabled="@string.IsNullOrWhiteSpace(_newActionName)"
                                                   OnClick="@(() => AddAction(reducer))">
                                            Add Action
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudCard>
                        }
                        
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   FullWidth="true"
                                   OnClick="AddReducer">
                            Add New Reducer
                        </MudButton>
                        
                        <!-- Generate Button -->
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AutoMode"
                                   FullWidth="true"
                                   Size="Size.Large"
                                   Disabled="@(!_isValid || !_options.Reducers.Any())"
                                   OnClick="GenerateAsync">
                            Generate Reducers
                        </MudButton>
                    </MudStack>
                </MudForm>
            </MudPaper>
        </MudItem>
        
        <!-- Generated Code Panel -->
        <MudItem xs="12" md="7">
            @if (!string.IsNullOrEmpty(_generatedCode))
            {
                <MudPaper Class="pa-4" Elevation="2">
                    <MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Generated Code</MudText>
                            <MudStack Row="true" Spacing="2">
                                <MudButton Variant="Variant.Outlined" 
                                           StartIcon="@Icons.Material.Filled.ContentCopy"
                                           OnClick="CopyToClipboard">
                                    Copy
                                </MudButton>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.Download"
                                           OnClick="DownloadCode">
                                    Download
                                </MudButton>
                            </MudStack>
                        </MudStack>
                        
                        <MudDivider Class="my-3" />
                        
                        <MudPaper Class="pa-3" Style="background-color: #1e1e1e; border-radius: 8px; overflow: auto; max-height: 70vh;">
                            <pre style="margin: 0; color: #d4d4d4; font-family: 'Cascadia Code', 'Courier New', monospace; font-size: 13px;">@_generatedCode</pre>
                        </MudPaper>
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudPaper Class="pa-8 text-center" Elevation="0" Style="background-color: #f5f5f5; height: 100%;">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h6" Class="mt-3">No Code Generated Yet</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Configure your reducers and click "Generate Reducers" to see the code.
                    </MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
    
    <!-- Example Usage -->
    <MudPaper Class="pa-4 mt-6" Elevation="1">
        <MudText Typo="Typo.h6" GutterBottom="true">Example Usage</MudText>
        <MudText Typo="Typo.body2" GutterBottom="true">
            Reducers handle state transitions in response to actions in your Ducky application:
        </MudText>
        <MudPaper Class="pa-3 mt-3" Style="background-color: #f5f5f5;">
            <pre style="margin: 0; font-family: 'Cascadia Code', monospace; font-size: 12px;">// Using generated reducers with SliceReducers
var todoReducers = new SliceReducers&lt;TodoState&gt;(new TodoState())
    .On&lt;AddTodoAction&gt;(TodoReducers.HandleAddTodo)
    .On&lt;ToggleTodoAction&gt;(TodoReducers.HandleToggleTodo);

// Register in store builder
services.AddDuckyStore(builder =>
{
    builder.AddSlice(todoReducers);
});</pre>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private readonly List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Generators", href: "#", icon: Icons.Material.Filled.Build),
        new BreadcrumbItem("Reducer", href: null, disabled: true)
    };
    
    private MudForm _form = null!;
    private bool _isValid;
    private readonly ReducerGeneratorOptions _options = new();
    private string? _generatedCode;
    private string _newActionName = string.Empty;
    private readonly Dictionary<ReducerDescriptor, string> _reducerClassNames = new();
    private readonly Dictionary<ReducerDescriptor, string> _stateTypes = new();

    protected override void OnInitialized()
    {
        // Set some better defaults
        _options.Namespace = "MyApp.Reducers";
        var initialReducer = new ReducerDescriptor
        {
            ReducerClassName = "CounterReducers",
            StateType = "CounterState",
            Actions = new List<string> { "IncrementAction", "DecrementAction", "ResetAction" }
        };
        
        _options.Reducers = new List<ReducerDescriptor> { initialReducer };
        
        // Initialize dictionaries
        _reducerClassNames[initialReducer] = initialReducer.ReducerClassName;
        _stateTypes[initialReducer] = initialReducer.StateType;
    }

    private string GetReducerClassNameWrapper(ReducerDescriptor reducer)
    {
        return _reducerClassNames.TryGetValue(reducer, out var value) ? value : reducer.ReducerClassName;
    }
    
    private string GetStateTypeWrapper(ReducerDescriptor reducer)
    {
        return _stateTypes.TryGetValue(reducer, out var value) ? value : reducer.StateType;
    }
    
    private void UpdateReducerClassName(ReducerDescriptor reducer, string newValue)
    {
        _reducerClassNames[reducer] = newValue;
        var index = _options.Reducers.IndexOf(reducer);
        _options.Reducers[index] = reducer with { ReducerClassName = newValue };
    }
    
    private void UpdateStateType(ReducerDescriptor reducer, string newValue)
    {
        _stateTypes[reducer] = newValue;
        var index = _options.Reducers.IndexOf(reducer);
        _options.Reducers[index] = reducer with { StateType = newValue };
    }

    private void AddReducer()
    {
        var newReducer = new ReducerDescriptor
        {
            ReducerClassName = $"NewReducers{_options.Reducers.Count + 1}",
            StateType = $"NewState{_options.Reducers.Count + 1}",
            Actions = new List<string>()
        };
        
        _options.Reducers.Add(newReducer);
        _reducerClassNames[newReducer] = newReducer.ReducerClassName;
        _stateTypes[newReducer] = newReducer.StateType;
    }

    private void RemoveReducer(ReducerDescriptor reducer)
    {
        _options.Reducers.Remove(reducer);
        _reducerClassNames.Remove(reducer);
        _stateTypes.Remove(reducer);
    }

    private void AddAction(ReducerDescriptor reducer)
    {
        if (!string.IsNullOrWhiteSpace(_newActionName))
        {
            var actions = reducer.Actions.ToList();
            if (!actions.Contains(_newActionName))
            {
                actions.Add(_newActionName);
                
                // Update the reducer with new actions list
                var index = _options.Reducers.IndexOf(reducer);
                _options.Reducers[index] = reducer with { Actions = actions };
                
                _newActionName = string.Empty;
            }
        }
    }

    private void RemoveAction(ReducerDescriptor reducer, string action)
    {
        var actions = reducer.Actions.ToList();
        actions.Remove(action);
        
        // Update the reducer with new actions list
        var index = _options.Reducers.IndexOf(reducer);
        _options.Reducers[index] = reducer with { Actions = actions };
    }

    private async Task GenerateAsync()
    {
        try
        {
            _generatedCode = await Generator.GenerateCodeAsync(_options);
            Snackbar.Add("Reducers generated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating code: {ex.Message}", Severity.Error);
        }
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(_generatedCode))
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", _generatedCode);
            Snackbar.Add("Code copied to clipboard!", Severity.Success);
        }
    }

    private async Task DownloadCode()
    {
        if (!string.IsNullOrEmpty(_generatedCode))
        {
            var fileName = "Reducers.cs";
            if (_options.Reducers.Count == 1)
            {
                fileName = $"{_options.Reducers.First().ReducerClassName}.cs";
            }
            await JS.InvokeVoidAsync("downloadFile", fileName, _generatedCode);
            Snackbar.Add($"Downloaded {fileName}", Severity.Success);
        }
    }
}