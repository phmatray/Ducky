@page "/generator/component"
@using Ducky.Generator.Core
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<PageTitle>Component Generator - Ducky Code Generator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <!-- Header with Breadcrumbs -->
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <MudGrid>
        <!-- Configuration Panel -->
        <MudItem xs="12" lg="6">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h5" GutterBottom="true">
                    <MudIcon Icon="@Icons.Material.Filled.Web" Class="mr-2" />
                    Component Generator
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" GutterBottom="true">
                    Generate strongly-typed Blazor component base classes for specific state slices.
                </MudText>
                
                <MudDivider Class="my-4" />
                
                <MudForm @ref="_form" @bind-IsValid="@_isValid">
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="_namespace" 
                                      Label="Namespace" 
                                      Variant="Variant.Outlined"
                                      HelperText="The C# namespace for generated components"
                                      Required="true"
                                      @bind-Value:after="@UpdateLivePreview" />
                        
                        <MudTextField @bind-Value="_rootStateType" 
                                      Label="Root State Type" 
                                      Variant="Variant.Outlined"
                                      HelperText="The root state type (e.g., AppState)"
                                      Required="true"
                                      @bind-Value:after="@UpdateLivePreview" />
                        
                        <MudTextField @bind-Value="_componentName" 
                                      Label="Component Name" 
                                      Variant="Variant.Outlined"
                                      HelperText="The name of the component base class"
                                      Required="true"
                                      @bind-Value:after="@UpdateLivePreview" />
                        
                        <MudTextField @bind-Value="_stateSliceName" 
                                      Label="State Slice Name" 
                                      Variant="Variant.Outlined"
                                      HelperText="The name of the state slice property"
                                      Required="true"
                                      @bind-Value:after="@UpdateLivePreview" />
                        
                        <MudTextField @bind-Value="_stateSliceType" 
                                      Label="State Slice Type" 
                                      Variant="Variant.Outlined"
                                      HelperText="The type of the state slice"
                                      Required="true"
                                      @bind-Value:after="@UpdateLivePreview" />
                        
                        <!-- Actions Builder -->
                        <MudStack>
                            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudText Typo="Typo.subtitle1">Actions</MudText>
                                <MudButton Variant="Variant.Outlined" 
                                           StartIcon="@Icons.Material.Filled.Add"
                                           Size="Size.Small"
                                           OnClick="AddAction">
                                    Add Action
                                </MudButton>
                            </MudStack>
                            
                            @if (_actions.Any())
                            {
                                <MudStack Spacing="2">
                                    @for (int i = 0; i < _actions.Count; i++)
                                    {
                                        var actionIndex = i; // Capture for closure
                                        var action = _actions[actionIndex];
                                        
                                        <MudPaper Class="pa-3" Elevation="1" Style="border-left: 4px solid #1976d2;">
                                            <MudStack Spacing="2">
                                                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                    <MudText Typo="Typo.subtitle2">Action @(actionIndex + 1)</MudText>
                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                   Size="Size.Small"
                                                                   Color="Color.Error"
                                                                   OnClick="() => RemoveAction(actionIndex)" />
                                                </MudStack>
                                                
                                                <MudGrid>
                                                    <MudItem xs="12" sm="6">
                                                        <MudTextField @bind-Value="action.ActionName"
                                                                      Label="Action Name"
                                                                      Variant="Variant.Outlined"
                                                                      HelperText="Method name (e.g., AddTodo)"
                                                                      @bind-Value:after="@UpdateLivePreview" />
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudTextField @bind-Value="action.ActionType"
                                                                      Label="Action Type"
                                                                      Variant="Variant.Outlined"
                                                                      HelperText="Class name (e.g., AddTodoAction)"
                                                                      @bind-Value:after="@UpdateLivePreview" />
                                                    </MudItem>
                                                </MudGrid>
                                                
                                                <!-- Parameters Section -->
                                                <MudStack>
                                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Parameters</MudText>
                                                        <MudButton Variant="Variant.Text" 
                                                                   StartIcon="@Icons.Material.Filled.Add"
                                                                   Size="Size.Small"
                                                                   OnClick="() => AddParameter(actionIndex)">
                                                            Add Parameter
                                                        </MudButton>
                                                    </MudStack>
                                                    
                                                    @if (action.Parameters.Any())
                                                    {
                                                        @for (int j = 0; j < action.Parameters.Count; j++)
                                                        {
                                                            var paramIndex = j; // Capture for closure
                                                            var param = action.Parameters[paramIndex];
                                                            
                                                            <MudGrid>
                                                                <MudItem xs="5">
                                                                    <MudTextField @bind-Value="param.ParamName"
                                                                                  Label="Name"
                                                                                  Variant="Variant.Outlined"
                                                                                  @bind-Value:after="@UpdateLivePreview" />
                                                                </MudItem>
                                                                <MudItem xs="5">
                                                                    <MudSelect @bind-Value="param.ParamType"
                                                                               Label="Type"
                                                                               Variant="Variant.Outlined"
                                                                               @bind-Value:after="@UpdateLivePreview">
                                                                        <MudSelectItem Value="@("string")">string</MudSelectItem>
                                                                        <MudSelectItem Value="@("int")">int</MudSelectItem>
                                                                        <MudSelectItem Value="@("bool")">bool</MudSelectItem>
                                                                        <MudSelectItem Value="@("Guid")">Guid</MudSelectItem>
                                                                        <MudSelectItem Value="@("DateTime")">DateTime</MudSelectItem>
                                                                        <MudSelectItem Value="@("decimal")">decimal</MudSelectItem>
                                                                        <MudSelectItem Value="@("double")">double</MudSelectItem>
                                                                    </MudSelect>
                                                                </MudItem>
                                                                <MudItem xs="2">
                                                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                                                   Size="Size.Small"
                                                                                   Color="Color.Error"
                                                                                   OnClick="() => RemoveParameter(actionIndex, paramIndex)" />
                                                                </MudItem>
                                                            </MudGrid>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="text-center pa-2">
                                                            No parameters - click "Add Parameter" to add some
                                                        </MudText>
                                                    }
                                                </MudStack>
                                            </MudStack>
                                        </MudPaper>
                                    }
                                </MudStack>
                            }
                            else
                            {
                                <MudPaper Class="pa-4 text-center" Elevation="0" Style="background-color: #f9f9f9; border: 2px dashed #ddd;">
                                    <MudIcon Icon="@Icons.Material.Filled.TouchApp" Size="Size.Large" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body1" Class="mt-2">No actions defined</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Click "Add Action" to get started</MudText>
                                </MudPaper>
                            }
                        </MudStack>
                        
                        <!-- Generate Button -->
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AutoMode"
                                   FullWidth="true"
                                   Size="Size.Large"
                                   Disabled="@(!_isValid)"
                                   OnClick="GenerateAsync">
                            Generate Component
                        </MudButton>
                    </MudStack>
                </MudForm>
            </MudPaper>
        </MudItem>
        
        <!-- Live Preview Panel -->
        <MudItem xs="12" lg="6">
            <MudPaper Class="pa-4" Elevation="2" Style="height: 100%; min-height: 600px;">
                <MudStack>
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                        <MudText Typo="Typo.h5">
                            <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" />
                            Live Preview
                        </MudText>
                        <MudStack Row="true" Spacing="2">
                            <MudButton Variant="Variant.Outlined" 
                                       StartIcon="@Icons.Material.Filled.ContentCopy"
                                       Size="Size.Small"
                                       Disabled="@string.IsNullOrEmpty(_livePreviewCode)"
                                       OnClick="CopyToClipboard">
                                Copy
                            </MudButton>
                            <MudButton Variant="Variant.Filled" 
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.Download"
                                       Size="Size.Small"
                                       Disabled="@string.IsNullOrEmpty(_livePreviewCode)"
                                       OnClick="DownloadCode">
                                Download
                            </MudButton>
                        </MudStack>
                    </MudStack>
                    
                    <MudDivider Class="my-3" />
                    
                    @if (!string.IsNullOrEmpty(_livePreviewCode))
                    {
                        <MudPaper Class="pa-3" Elevation="0" Style="background-color: #1e1e1e; border-radius: 8px; overflow: auto; max-height: calc(100vh - 200px); flex-grow: 1;">
                            <pre style="margin: 0; color: #d4d4d4; font-family: 'Cascadia Code', 'Courier New', monospace; font-size: 12px; line-height: 1.4;">@_livePreviewCode</pre>
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Class="pa-8 text-center" Elevation="0" Style="background-color: #f5f5f5; flex-grow: 1; display: flex; flex-direction: column; justify-content: center;">
                            <MudIcon Icon="@Icons.Material.Filled.Preview" Size="Size.Large" Color="Color.Secondary" />
                            <MudText Typo="Typo.h6" Class="mt-3">Live Preview</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                Start configuring your component to see a live preview of the generated code.
                            </MudText>
                        </MudPaper>
                    }
                    
                    @if (!string.IsNullOrEmpty(_previewError))
                    {
                        <MudAlert Severity="Severity.Warning" Class="mt-2">
                            <MudText>@_previewError</MudText>
                        </MudAlert>
                    }
                </MudStack>
            </MudPaper>
        </MudItem>
    </MudGrid>
    
    <!-- Example Usage -->
    <MudPaper Class="pa-4 mt-6" Elevation="1">
        <MudText Typo="Typo.h6" GutterBottom="true">Example Usage</MudText>
        <MudText Typo="Typo.body2" GutterBottom="true">
            After generating a component base class, inherit from it in your Blazor components:
        </MudText>
        <MudPaper Class="pa-3 mt-3" Style="background-color: #f5f5f5;">
            <pre style="margin: 0; font-family: 'Cascadia Code', monospace; font-size: 12px;">@@page "/todos"
@@inherits TodoStateComponent

&lt;MudCard&gt;
    &lt;MudCardContent&gt;
        &lt;MudText Typo="Typo.h6"&gt;Todo List&lt;/MudText&gt;
        &lt;MudText&gt;Todo Count: @@State.Items.Count&lt;/MudText&gt;
        
        @@foreach (var todo in State.Items)
        {
            &lt;MudCheckBox Value="@@todo.IsCompleted" 
                         ValueChanged="@@(() =&gt; ToggleTodo(todo.Id))"&gt;
                @@todo.Title
            &lt;/MudCheckBox&gt;
        }
        
        &lt;MudButton OnClick="@@(() =&gt; AddTodo(Random.Shared.Next(), 'New Todo'))"&gt;
            Add Todo
        &lt;/MudButton&gt;
    &lt;/MudCardContent&gt;
&lt;/MudCard&gt;</pre>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private readonly List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Generators", href: "#", icon: Icons.Material.Filled.Build),
        new BreadcrumbItem("Component", href: null, disabled: true)
    };
    
    private MudForm _form = null!;
    private bool _isValid;
    private string? _generatedCode;
    private string? _livePreviewCode;
    private string? _previewError;
    private string _namespace = "MyApp.Components";
    private string _rootStateType = "AppState";
    private string _componentName = "TodoStateComponent";
    private string _stateSliceName = "Todos";
    private string _stateSliceType = "TodoState";
    
    private List<MutableActionDescriptor> _actions = new()
    {
        new MutableActionDescriptor
        {
            ActionName = "AddTodo",
            ActionType = "AddTodoAction",
            Parameters = new List<MutableParameterDescriptor>
            {
                new MutableParameterDescriptor { ParamName = "id", ParamType = "int" },
                new MutableParameterDescriptor { ParamName = "title", ParamType = "string" }
            }
        },
        new MutableActionDescriptor
        {
            ActionName = "ToggleTodo",
            ActionType = "ToggleTodoAction", 
            Parameters = new List<MutableParameterDescriptor>
            {
                new MutableParameterDescriptor { ParamName = "id", ParamType = "int" }
            }
        }
    };

    public class MutableActionDescriptor
    {
        public string ActionName { get; set; } = string.Empty;
        public string ActionType { get; set; } = string.Empty;
        public List<MutableParameterDescriptor> Parameters { get; set; } = new();
        
        public ComponentActionDescriptor ToComponentAction()
        {
            return new ComponentActionDescriptor
            {
                ActionName = ActionName,
                ActionType = ActionType,
                Parameters = Parameters.Select(p => new ParameterDescriptor 
                { 
                    ParamName = p.ParamName, 
                    ParamType = p.ParamType 
                }).ToList()
            };
        }
    }

    public class MutableParameterDescriptor
    {
        public string ParamName { get; set; } = string.Empty;
        public string ParamType { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateLivePreview();
    }

    private async Task GenerateAsync()
    {
        try
        {
            var options = CreateComponentOptions();
            var generator = new ComponentGenerator();
            _generatedCode = await generator.GenerateCodeAsync(options);
            Snackbar.Add("Component generated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating code: {ex.Message}", Severity.Error);
        }
    }

    private async Task UpdateLivePreview()
    {
        try
        {
            _previewError = null;
            
            if (string.IsNullOrWhiteSpace(_namespace) || 
                string.IsNullOrWhiteSpace(_rootStateType) || 
                string.IsNullOrWhiteSpace(_componentName) ||
                string.IsNullOrWhiteSpace(_stateSliceName) ||
                string.IsNullOrWhiteSpace(_stateSliceType))
            {
                _livePreviewCode = null;
                StateHasChanged();
                return;
            }

            var options = CreateComponentOptions();
            var generator = new ComponentGenerator();
            _livePreviewCode = await generator.GenerateCodeAsync(options);
        }
        catch (Exception ex)
        {
            _previewError = $"Preview error: {ex.Message}";
            _livePreviewCode = null;
        }
        
        StateHasChanged();
    }

    private ComponentGeneratorOptions CreateComponentOptions()
    {
        return new ComponentGeneratorOptions
        {
            Namespace = _namespace,
            RootStateType = _rootStateType,
            Components = new List<ComponentDescriptor>
            {
                new ComponentDescriptor
                {
                    ComponentName = _componentName,
                    StateSliceName = _stateSliceName,
                    StateSliceType = _stateSliceType,
                    StateSliceProperty = _stateSliceName,
                    Actions = _actions.Select(a => a.ToComponentAction()).ToList()
                }
            }
        };
    }

    private async Task AddAction()
    {
        _actions.Add(new MutableActionDescriptor
        {
            ActionName = $"Action{_actions.Count + 1}",
            ActionType = $"Action{_actions.Count + 1}Action",
            Parameters = new List<MutableParameterDescriptor>()
        });
        await UpdateLivePreview();
    }

    private async Task RemoveAction(int index)
    {
        if (index >= 0 && index < _actions.Count)
        {
            _actions.RemoveAt(index);
            await UpdateLivePreview();
        }
    }

    private async Task AddParameter(int actionIndex)
    {
        if (actionIndex >= 0 && actionIndex < _actions.Count)
        {
            _actions[actionIndex].Parameters.Add(new MutableParameterDescriptor
            {
                ParamName = "param",
                ParamType = "string"
            });
            await UpdateLivePreview();
        }
    }

    private async Task RemoveParameter(int actionIndex, int paramIndex)
    {
        if (actionIndex >= 0 && actionIndex < _actions.Count &&
            paramIndex >= 0 && paramIndex < _actions[actionIndex].Parameters.Count)
        {
            _actions[actionIndex].Parameters.RemoveAt(paramIndex);
            await UpdateLivePreview();
        }
    }


    private async Task CopyToClipboard()
    {
        var codeToUse = !string.IsNullOrEmpty(_livePreviewCode) ? _livePreviewCode : _generatedCode;
        if (!string.IsNullOrEmpty(codeToUse))
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", codeToUse);
            Snackbar.Add("Code copied to clipboard!", Severity.Success);
        }
    }

    private async Task DownloadCode()
    {
        var codeToUse = !string.IsNullOrEmpty(_livePreviewCode) ? _livePreviewCode : _generatedCode;
        if (!string.IsNullOrEmpty(codeToUse))
        {
            var fileName = $"{_componentName}.cs";
            await JS.InvokeVoidAsync("downloadFile", fileName, codeToUse);
            Snackbar.Add($"Downloaded {fileName}", Severity.Success);
        }
    }
}