@page "/generator/action-creator"
@using Ducky.CodeGen.Core
@inject ActionCreatorGenerator Generator
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<PageTitle>Action Creator Generator - Ducky Code Generator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <!-- Header with Breadcrumbs -->
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <MudGrid>
        <!-- Configuration Panel -->
        <MudItem xs="12" md="5">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h5" GutterBottom="true">
                    <MudIcon Icon="@Icons.Material.Filled.PlayArrow" Class="mr-2" />
                    Action Creator Generator
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" GutterBottom="true">
                    Generate strongly-typed action creators for your Ducky state management.
                </MudText>
                
                <MudDivider Class="my-4" />
                
                <MudForm @ref="_form" @bind-IsValid="@_isValid">
                    <MudStack Spacing="3">
                        <!-- Basic Configuration -->
                        <MudTextField @bind-Value="_options.Namespace" 
                                      Label="Namespace" 
                                      Variant="Variant.Outlined"
                                      HelperText="The C# namespace for your actions"
                                      Required="true" />
                        
                        <MudTextField @bind-Value="_options.StateType" 
                                      Label="State Type" 
                                      Variant="Variant.Outlined"
                                      HelperText="The name of your state type (e.g., AppState, TodoState)"
                                      Required="true" />
                        
                        <!-- Actions List -->
                        <MudText Typo="Typo.h6" Class="mt-4">Actions</MudText>
                        
                        @foreach (var action in _options.Actions)
                        {
                            <MudCard Outlined="true" Class="pa-3">
                                <MudStack>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudTextField Value="@action.ActionName" 
                                                      ValueChanged="@((string value) => UpdateActionName(action, value))"
                                                      Label="Action Name" 
                                                      Variant="Variant.Outlined"
                                                      Style="flex: 1;"
                                                      Required="true" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       title="Remove Action"
                                                       OnClick="@(() => RemoveAction(action))" />
                                    </MudStack>
                                    
                                    <!-- Parameters -->
                                    <MudText Typo="Typo.subtitle2">Parameters</MudText>
                                    @foreach (var param in action.Parameters)
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudTextField Value="@param.ParamType" 
                                                          ValueChanged="@((string value) => UpdateParameterType(action, param, value))"
                                                          Label="Type" 
                                                          Variant="Variant.Outlined"
                                                          Style="flex: 1;" />
                                            <MudTextField Value="@param.ParamName" 
                                                          ValueChanged="@((string value) => UpdateParameterName(action, param, value))"
                                                          Label="Name" 
                                                          Variant="Variant.Outlined"
                                                          Style="flex: 1;" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                                           Color="Color.Error" 
                                                           Size="Size.Small"
                                                           OnClick="@(() => RemoveParameter(action, param))" />
                                        </MudStack>
                                    }
                                    <MudButton Variant="Variant.Text" 
                                               StartIcon="@Icons.Material.Filled.Add"
                                               Size="Size.Small"
                                               OnClick="@(() => AddParameter(action))">
                                        Add Parameter
                                    </MudButton>
                                </MudStack>
                            </MudCard>
                        }
                        
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   FullWidth="true"
                                   OnClick="AddAction">
                            Add New Action
                        </MudButton>
                        
                        <!-- Generate Button -->
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AutoMode"
                                   FullWidth="true"
                                   Size="Size.Large"
                                   Disabled="@(!_isValid || !_options.Actions.Any())"
                                   OnClick="GenerateAsync">
                            Generate Action Creators
                        </MudButton>
                    </MudStack>
                </MudForm>
            </MudPaper>
        </MudItem>
        
        <!-- Generated Code Panel -->
        <MudItem xs="12" md="7">
            @if (!string.IsNullOrEmpty(_generatedCode))
            {
                <MudPaper Class="pa-4" Elevation="2">
                    <MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Generated Code</MudText>
                            <MudStack Row="true" Spacing="2">
                                <MudButton Variant="Variant.Outlined" 
                                           StartIcon="@Icons.Material.Filled.ContentCopy"
                                           OnClick="CopyToClipboard">
                                    Copy
                                </MudButton>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.Download"
                                           OnClick="DownloadCode">
                                    Download
                                </MudButton>
                            </MudStack>
                        </MudStack>
                        
                        <MudDivider Class="my-3" />
                        
                        <MudPaper Class="pa-3" Style="background-color: #1e1e1e; border-radius: 8px; overflow: auto; max-height: 70vh;">
                            <pre style="margin: 0; color: #d4d4d4; font-family: 'Cascadia Code', 'Courier New', monospace; font-size: 13px;">@_generatedCode</pre>
                        </MudPaper>
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudPaper Class="pa-8 text-center" Elevation="0" Style="background-color: #f5f5f5; height: 100%;">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h6" Class="mt-3">No Code Generated Yet</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Configure your actions and click "Generate Action Creators" to see the code.
                    </MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
    
    <!-- Example Usage -->
    <MudPaper Class="pa-4 mt-6" Elevation="1">
        <MudText Typo="Typo.h6" GutterBottom="true">Example Usage</MudText>
        <MudText Typo="Typo.body2" GutterBottom="true">
            Action creators provide a type-safe way to create actions in your Ducky application:
        </MudText>
        <MudPaper Class="pa-3 mt-3" Style="background-color: #f5f5f5;">
            <pre style="margin: 0; font-family: 'Cascadia Code', monospace; font-size: 12px;">// Using generated action creators
var addAction = ActionCreators.AddTodo(1, "Learn Ducky");
var toggleAction = ActionCreators.ToggleTodo(1);

// Dispatch actions
store.Dispatch(addAction);
store.Dispatch(toggleAction);</pre>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private readonly List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Generators", href: "#", icon: Icons.Material.Filled.Build),
        new BreadcrumbItem("Action Creator", href: null, disabled: true)
    };
    
    private MudForm _form = null!;
    private bool _isValid;
    private readonly ActionCreatorGeneratorOptions _options = new();
    private string? _generatedCode;

    protected override void OnInitialized()
    {
        // Set some better defaults
        _options.Namespace = "MyApp.Actions";
        _options.StateType = "AppState";
        _options.Actions = new List<ActionDescriptor>
        {
            new ActionDescriptor
            {
                ActionName = "IncrementCounter",
                Parameters = new List<ParameterDescriptor>
                {
                    new() { ParamType = "int", ParamName = "amount" }
                }
            }
        };
    }

    private void UpdateActionName(ActionDescriptor action, string newValue)
    {
        var index = _options.Actions.IndexOf(action);
        _options.Actions[index] = action with { ActionName = newValue };
    }
    
    private void UpdateParameterType(ActionDescriptor action, ParameterDescriptor parameter, string newValue)
    {
        var parameters = action.Parameters.ToList();
        var paramIndex = parameters.IndexOf(parameter);
        parameters[paramIndex] = parameter with { ParamType = newValue };
        
        var index = _options.Actions.IndexOf(action);
        _options.Actions[index] = action with { Parameters = parameters };
    }
    
    private void UpdateParameterName(ActionDescriptor action, ParameterDescriptor parameter, string newValue)
    {
        var parameters = action.Parameters.ToList();
        var paramIndex = parameters.IndexOf(parameter);
        parameters[paramIndex] = parameter with { ParamName = newValue };
        
        var index = _options.Actions.IndexOf(action);
        _options.Actions[index] = action with { Parameters = parameters };
    }

    private void AddAction()
    {
        _options.Actions.Add(new ActionDescriptor
        {
            ActionName = $"NewAction{_options.Actions.Count + 1}",
            Parameters = new List<ParameterDescriptor>()
        });
    }

    private void RemoveAction(ActionDescriptor action)
    {
        _options.Actions.Remove(action);
    }

    private void AddParameter(ActionDescriptor action)
    {
        var parameters = action.Parameters.ToList();
        parameters.Add(new ParameterDescriptor 
        { 
            ParamType = "string", 
            ParamName = $"param{parameters.Count + 1}" 
        });
        
        // Update the action with new parameters list
        var index = _options.Actions.IndexOf(action);
        _options.Actions[index] = action with { Parameters = parameters };
    }

    private void RemoveParameter(ActionDescriptor action, ParameterDescriptor parameter)
    {
        var parameters = action.Parameters.ToList();
        parameters.Remove(parameter);
        
        // Update the action with new parameters list
        var index = _options.Actions.IndexOf(action);
        _options.Actions[index] = action with { Parameters = parameters };
    }

    private async Task GenerateAsync()
    {
        try
        {
            _generatedCode = await Generator.GenerateCodeAsync(_options);
            Snackbar.Add("Action creators generated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating code: {ex.Message}", Severity.Error);
        }
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(_generatedCode))
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", _generatedCode);
            Snackbar.Add("Code copied to clipboard!", Severity.Success);
        }
    }

    private async Task DownloadCode()
    {
        if (!string.IsNullOrEmpty(_generatedCode))
        {
            var fileName = $"{_options.StateType}ActionCreators.cs";
            await JS.InvokeVoidAsync("downloadFile", fileName, _generatedCode);
            Snackbar.Add($"Downloaded {fileName}", Severity.Success);
        }
    }
}