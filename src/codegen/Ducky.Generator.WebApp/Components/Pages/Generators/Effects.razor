@page "/generator/effects"
@using Ducky.Generator.Core
@inject EffectsGenerator Generator
@inject ISnackbar Snackbar
@inject IJSRuntime Js

<PageTitle>Effects Generator - Ducky Code Generator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <!-- Header with Breadcrumbs -->
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <MudGrid>
        <!-- Configuration Panel -->
        <MudItem xs="12" md="5">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h5" GutterBottom="true">
                    <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Class="mr-2" />
                    Effects Generator
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" GutterBottom="true">
                    Generate effect classes for handling side effects like API calls, timers, and other async operations.
                </MudText>
                
                <MudDivider Class="my-4" />
                
                <MudForm @ref="_form" @bind-IsValid="@_isValid">
                    <MudStack Spacing="3">
                        <!-- Basic Configuration -->
                        <MudTextField @bind-Value="_options.Namespace" 
                                      Label="Namespace" 
                                      Variant="Variant.Outlined"
                                      HelperText="The C# namespace for your effects"
                                      Required="true" />
                        
                        <!-- Effects List -->
                        <MudText Typo="Typo.h6" Class="mt-4">Effect Classes</MudText>
                        
                        @foreach (var effect in _options.Effects)
                        {
                            <MudCard Outlined="true" Class="pa-3">
                                <MudStack>
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudTextField Value="@GetEffectNameWrapper(effect)" 
                                                      ValueChanged="@((string value) => UpdateEffectName(effect, value))"
                                                      Label="Effect Class Name" 
                                                      Variant="Variant.Outlined"
                                                      Style="flex: 1;"
                                                      Required="true" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                       Color="Color.Error" 
                                                       Size="Size.Small"
                                                       title="Remove Effect"
                                                       OnClick="@(() => RemoveEffect(effect))" />
                                    </MudStack>
                                    
                                    <MudStack Row="true" Spacing="2">
                                        <MudSelect Value="@GetEffectTypeWrapper(effect)" 
                                                   ValueChanged="@((EffectType value) => UpdateEffectType(effect, value))"
                                                   Label="Effect Type" 
                                                   Variant="Variant.Outlined"
                                                   Style="flex: 1;">
                                            <MudSelectItem Value="EffectType.Reactive">Reactive Effect</MudSelectItem>
                                            <MudSelectItem Value="EffectType.Async">Async Effect</MudSelectItem>
                                        </MudSelect>
                                        <MudNumericField Value="@GetTimeoutWrapper(effect)"
                                                         ValueChanged="@((int value) => UpdateTimeout(effect, value))"
                                                         Label="Timeout (ms)"
                                                         Variant="Variant.Outlined"
                                                         Style="flex: 1;"
                                                         Min="1000" Max="300000" />
                                    </MudStack>
                                    
                                    <MudTextField Value="@GetSummaryWrapper(effect)" 
                                                  ValueChanged="@((string value) => UpdateSummary(effect, value))"
                                                  Label="Description" 
                                                  Variant="Variant.Outlined"
                                                  Placeholder="Describe what this effect does"
                                                  Lines="2" />
                                    
                                    <MudSwitch Value="@GetHandleErrorsWrapper(effect)"
                                               ValueChanged="@((bool value) => UpdateHandleErrors(effect, value))"
                                               Label="Handle Errors Automatically"
                                               Color="Color.Primary" />
                                    
                                    <!-- Trigger Actions -->
                                    <MudText Typo="Typo.subtitle2">Trigger Actions</MudText>
                                    @foreach (var action in effect.TriggerActions.ToList())
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudTextField Value="@action" 
                                                          ValueChanged="@((string value) => UpdateTriggerAction(effect, action, value))"
                                                          Label="Action Type" 
                                                          Variant="Variant.Outlined"
                                                          Style="flex: 1;" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                                           Color="Color.Error" 
                                                           Size="Size.Small"
                                                           OnClick="@(() => RemoveTriggerAction(effect, action))" />
                                        </MudStack>
                                    }
                                    <MudStack Row="true" Spacing="2">
                                        <MudTextField @bind-Value="_newTriggerAction" 
                                                      Label="New Trigger Action" 
                                                      Variant="Variant.Outlined"
                                                      Style="flex: 1;"
                                                      Placeholder="e.g., LoadDataAction" />
                                        <MudButton Variant="Variant.Text" 
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   Size="Size.Small"
                                                   Disabled="@string.IsNullOrWhiteSpace(_newTriggerAction)"
                                                   OnClick="@(() => AddTriggerAction(effect))">
                                            Add
                                        </MudButton>
                                    </MudStack>
                                    
                                    <!-- Result Actions -->
                                    <MudText Typo="Typo.subtitle2">Result Actions</MudText>
                                    @foreach (var action in effect.ResultActions.ToList())
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudTextField Value="@action" 
                                                          ValueChanged="@((string value) => UpdateResultAction(effect, action, value))"
                                                          Label="Action Type" 
                                                          Variant="Variant.Outlined"
                                                          Style="flex: 1;" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                                           Color="Color.Error" 
                                                           Size="Size.Small"
                                                           OnClick="@(() => RemoveResultAction(effect, action))" />
                                        </MudStack>
                                    }
                                    <MudStack Row="true" Spacing="2">
                                        <MudTextField @bind-Value="_newResultAction" 
                                                      Label="New Result Action" 
                                                      Variant="Variant.Outlined"
                                                      Style="flex: 1;"
                                                      Placeholder="e.g., LoadDataSuccessAction" />
                                        <MudButton Variant="Variant.Text" 
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   Size="Size.Small"
                                                   Disabled="@string.IsNullOrWhiteSpace(_newResultAction)"
                                                   OnClick="@(() => AddResultAction(effect))">
                                            Add
                                        </MudButton>
                                    </MudStack>
                                    
                                    <!-- Dependencies -->
                                    <MudText Typo="Typo.subtitle2">Dependencies</MudText>
                                    @foreach (var dep in effect.Dependencies.ToList())
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudTextField Value="@dep" 
                                                          ValueChanged="@((string value) => UpdateDependency(effect, dep, value))"
                                                          Label="Dependency" 
                                                          Variant="Variant.Outlined"
                                                          Style="flex: 1;" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Remove" 
                                                           Color="Color.Error" 
                                                           Size="Size.Small"
                                                           OnClick="@(() => RemoveDependency(effect, dep))" />
                                        </MudStack>
                                    }
                                    <MudStack Row="true" Spacing="2">
                                        <MudTextField @bind-Value="_newDependency" 
                                                      Label="New Dependency" 
                                                      Variant="Variant.Outlined"
                                                      Style="flex: 1;"
                                                      Placeholder="e.g., IDataService" />
                                        <MudButton Variant="Variant.Text" 
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   Size="Size.Small"
                                                   Disabled="@string.IsNullOrWhiteSpace(_newDependency)"
                                                   OnClick="@(() => AddDependency(effect))">
                                            Add
                                        </MudButton>
                                    </MudStack>
                                </MudStack>
                            </MudCard>
                        }
                        
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   FullWidth="true"
                                   OnClick="AddEffect">
                            Add New Effect
                        </MudButton>
                        
                        <!-- Generate Button -->
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AutoMode"
                                   FullWidth="true"
                                   Size="Size.Large"
                                   Disabled="@(!_isValid || !_options.Effects.Any())"
                                   OnClick="GenerateAsync">
                            Generate Effects
                        </MudButton>
                    </MudStack>
                </MudForm>
            </MudPaper>
        </MudItem>
        
        <!-- Generated Code Panel -->
        <MudItem xs="12" md="7">
            @if (!string.IsNullOrEmpty(_generatedCode))
            {
                <MudPaper Class="pa-4" Elevation="2">
                    <MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Generated Code</MudText>
                            <MudStack Row="true" Spacing="2">
                                <MudButton Variant="Variant.Outlined" 
                                           StartIcon="@Icons.Material.Filled.ContentCopy"
                                           OnClick="CopyToClipboardAsync">
                                    Copy
                                </MudButton>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.Download"
                                           OnClick="DownloadCodeAsync">
                                    Download
                                </MudButton>
                            </MudStack>
                        </MudStack>
                        
                        <MudDivider Class="my-3" />
                        
                        <MudPaper Class="pa-3" Style="background-color: #1e1e1e; border-radius: 8px; overflow: auto; max-height: 70vh;">
                            <pre style="margin: 0; color: #d4d4d4; font-family: 'Cascadia Code', 'Courier New', monospace; font-size: 13px;">@_generatedCode</pre>
                        </MudPaper>
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudPaper Class="pa-8 text-center" Elevation="0" Style="background-color: #f5f5f5; height: 100%;">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h6" Class="mt-3">No Code Generated Yet</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Configure your effects and click "Generate Effects" to see the code.
                    </MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
    
    <!-- Example Usage -->
    <MudPaper Class="pa-4 mt-6" Elevation="1">
        <MudText Typo="Typo.h6" GutterBottom="true">Example Usage</MudText>
        <MudText Typo="Typo.body2" GutterBottom="true">
            Effects handle side effects like API calls, timers, and other async operations:
        </MudText>
        <MudPaper Class="pa-3 mt-3" Style="background-color: #f5f5f5;">
            <pre style="margin: 0; font-family: 'Cascadia Code', monospace; font-size: 12px;">// Register effects in store builder
services.AddDuckyStore(builder =>
{
    builder
        .AddEffect&lt;LoadTodosEffect&gt;()
        .AddEffect&lt;SaveTodoEffect&gt;()
        .AddDefaultMiddlewares();
});

// Effects will automatically handle actions
store.Dispatch(new LoadTodosAction()); // Triggers LoadTodosEffect</pre>
        </MudPaper>
    </MudPaper>
</MudContainer>
