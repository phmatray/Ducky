@inject IJSRuntime JS

@if (!string.IsNullOrEmpty(Code))
{
  <MudText Typo="Typo.h5">
    Generated Code
  </MudText>
  
  <MudPaper>
    <pre class="language-cs" style="font-size: 0.75rem;">
      <code class="language-cs">@_highlightedCode</code>
    </pre>

    @* var bytes = Encoding.UTF8.GetBytes(Code); *@
    @* var base64 = Convert.ToBase64String(bytes); *@
    @* <a class="btn btn-success" href="data:text/plain;base64,@base64" download="@($"{opts.ClassName}.cs")"> *@
    @*   Download .cs *@
    @* </a> *@
  </MudPaper>
  
  <MudStack AlignItems="AlignItems.End">
    <MudButton
      Variant="Variant.Filled"
      Color="Color.Secondary"
      OnClick="Copy"
      StartIcon="@Icons.Material.Filled.ContentCopy">
      Copy to Clipboard
    </MudButton>
  </MudStack>
}

@code {

  private MarkupString? _highlightedCode;

  [Parameter]
  [EditorRequired]
  public required string? Code { get; set; }

  protected override void OnParametersSet()
  {
    if (!string.IsNullOrEmpty(Code))
    {
      // var bytes = Encoding.UTF8.GetBytes(Code);
      // var base64 = Convert.ToBase64String(bytes);
      // DownloadLink = $"data:text/plain;base64,{base64}";
      // you could also derive this from some other param:
      // DownloadFileName = "ActionCreators.cs";
    }
  }

  /// <inheritdoc />
  protected override async Task OnParametersSetAsync()
  {
    if (!string.IsNullOrEmpty(Code))
    {
      var highlighted = await Highlight(Code);
      _highlightedCode = new MarkupString(highlighted);
      StateHasChanged();
    }
    
    await base.OnParametersSetAsync();
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && !string.IsNullOrEmpty(Code))
    {
      var highlighted = await Highlight(Code);
      _highlightedCode = new MarkupString(highlighted);
      StateHasChanged();
    }

    await base.OnAfterRenderAsync(firstRender);
  }
  
  private async Task<string> Highlight(string code)
    => await JS.InvokeAsync<string>("highlight", code);

  private async Task Copy() 
    => await JS.InvokeVoidAsync("navigator.clipboard.writeText", Code);
  
}