@page "/generator/component"
@using Ducky.CodeGen.Core
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<PageTitle>Component Generator - Ducky Code Generator</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <!-- Header with Breadcrumbs -->
    <MudBreadcrumbs Items="_breadcrumbs" Class="mb-4" />
    
    <MudGrid>
        <!-- Configuration Panel -->
        <MudItem xs="12" md="5">
            <MudPaper Class="pa-4" Elevation="2">
                <MudText Typo="Typo.h5" GutterBottom="true">
                    <MudIcon Icon="@Icons.Material.Filled.Web" Class="mr-2" />
                    Component Generator
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" GutterBottom="true">
                    Generate strongly-typed Blazor component base classes for specific state slices.
                </MudText>
                
                <MudDivider Class="my-4" />
                
                <MudForm @ref="_form" @bind-IsValid="@_isValid">
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="_namespace" 
                                      Label="Namespace" 
                                      Variant="Variant.Outlined"
                                      HelperText="The C# namespace for generated components"
                                      Required="true" />
                        
                        <MudTextField @bind-Value="_rootStateType" 
                                      Label="Root State Type" 
                                      Variant="Variant.Outlined"
                                      HelperText="The root state type (e.g., AppState)"
                                      Required="true" />
                        
                        <MudTextField @bind-Value="_componentName" 
                                      Label="Component Name" 
                                      Variant="Variant.Outlined"
                                      HelperText="The name of the component base class"
                                      Required="true" />
                        
                        <MudTextField @bind-Value="_stateSliceName" 
                                      Label="State Slice Name" 
                                      Variant="Variant.Outlined"
                                      HelperText="The name of the state slice property"
                                      Required="true" />
                        
                        <MudTextField @bind-Value="_stateSliceType" 
                                      Label="State Slice Type" 
                                      Variant="Variant.Outlined"
                                      HelperText="The type of the state slice"
                                      Required="true" />
                        
                        <MudTextField @bind-Value="_actionsText" 
                                      Label="Actions" 
                                      Variant="Variant.Outlined"
                                      Lines="3"
                                      HelperText="Actions (one per line: ActionName|ActionType|param1:type1,param2:type2)"
                                      Placeholder="AddTodo|AddTodoAction|id:int,title:string&#10;ToggleTodo|ToggleTodoAction|id:int" />
                        
                        <!-- Generate Button -->
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AutoMode"
                                   FullWidth="true"
                                   Size="Size.Large"
                                   Disabled="@(!_isValid)"
                                   OnClick="GenerateAsync">
                            Generate Component
                        </MudButton>
                    </MudStack>
                </MudForm>
            </MudPaper>
        </MudItem>
        
        <!-- Generated Code Panel -->
        <MudItem xs="12" md="7">
            @if (!string.IsNullOrEmpty(_generatedCode))
            {
                <MudPaper Class="pa-4" Elevation="2">
                    <MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                            <MudText Typo="Typo.h5">Generated Code</MudText>
                            <MudStack Row="true" Spacing="2">
                                <MudButton Variant="Variant.Outlined" 
                                           StartIcon="@Icons.Material.Filled.ContentCopy"
                                           OnClick="CopyToClipboard">
                                    Copy
                                </MudButton>
                                <MudButton Variant="Variant.Filled" 
                                           Color="Color.Secondary"
                                           StartIcon="@Icons.Material.Filled.Download"
                                           OnClick="DownloadCode">
                                    Download
                                </MudButton>
                            </MudStack>
                        </MudStack>
                        
                        <MudDivider Class="my-3" />
                        
                        <MudPaper Class="pa-3" Style="background-color: #1e1e1e; border-radius: 8px; overflow: auto; max-height: 70vh;">
                            <pre style="margin: 0; color: #d4d4d4; font-family: 'Cascadia Code', 'Courier New', monospace; font-size: 13px;">@_generatedCode</pre>
                        </MudPaper>
                    </MudStack>
                </MudPaper>
            }
            else
            {
                <MudPaper Class="pa-8 text-center" Elevation="0" Style="background-color: #f5f5f5; height: 100%;">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Size="Size.Large" Color="Color.Secondary" />
                    <MudText Typo="Typo.h6" Class="mt-3">No Code Generated Yet</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Configure your component settings and click "Generate Component" to see the code.
                    </MudText>
                </MudPaper>
            }
        </MudItem>
    </MudGrid>
    
    <!-- Example Usage -->
    <MudPaper Class="pa-4 mt-6" Elevation="1">
        <MudText Typo="Typo.h6" GutterBottom="true">Example Usage</MudText>
        <MudText Typo="Typo.body2" GutterBottom="true">
            After generating a component base class, inherit from it in your Blazor components:
        </MudText>
        <MudPaper Class="pa-3 mt-3" Style="background-color: #f5f5f5;">
            <pre style="margin: 0; font-family: 'Cascadia Code', monospace; font-size: 12px;">@@page "/todos"
@@inherits TodoStateComponent

&lt;MudCard&gt;
    &lt;MudCardContent&gt;
        &lt;MudText Typo="Typo.h6"&gt;Todo List&lt;/MudText&gt;
        &lt;MudText&gt;Todo Count: @@State.Items.Count&lt;/MudText&gt;
        
        @@foreach (var todo in State.Items)
        {
            &lt;MudCheckBox Value="@@todo.IsCompleted" 
                         ValueChanged="@@(() =&gt; ToggleTodo(todo.Id))"&gt;
                @@todo.Title
            &lt;/MudCheckBox&gt;
        }
        
        &lt;MudButton OnClick="@@(() =&gt; AddTodo(Random.Shared.Next(), 'New Todo'))"&gt;
            Add Todo
        &lt;/MudButton&gt;
    &lt;/MudCardContent&gt;
&lt;/MudCard&gt;</pre>
        </MudPaper>
    </MudPaper>
</MudContainer>

@code {
    private readonly List<BreadcrumbItem> _breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Generators", href: "#", icon: Icons.Material.Filled.Build),
        new BreadcrumbItem("Component", href: null, disabled: true)
    };
    
    private MudForm _form = null!;
    private bool _isValid;
    private string? _generatedCode;
    private string _namespace = "MyApp.Components";
    private string _rootStateType = "AppState";
    private string _componentName = "TodoStateComponent";
    private string _stateSliceName = "Todos";
    private string _stateSliceType = "TodoState";
    private string _actionsText = "AddTodo|AddTodoAction|id:int,title:string\nToggleTodo|ToggleTodoAction|id:int";

    private async Task GenerateAsync()
    {
        try
        {
            var actions = ParseActions(_actionsText);
            
            var options = new ComponentGeneratorOptions
            {
                Namespace = _namespace,
                RootStateType = _rootStateType,
                Components = new List<ComponentDescriptor>
                {
                    new ComponentDescriptor
                    {
                        ComponentName = _componentName,
                        StateSliceName = _stateSliceName,
                        StateSliceType = _stateSliceType,
                        StateSliceProperty = _stateSliceName,
                        Actions = actions
                    }
                }
            };

            var generator = new ComponentGenerator();
            _generatedCode = await generator.GenerateCodeAsync(options);
            Snackbar.Add("Component generated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error generating code: {ex.Message}", Severity.Error);
        }
    }

    private List<ComponentActionDescriptor> ParseActions(string actionsText)
    {
        var actions = new List<ComponentActionDescriptor>();
        
        if (string.IsNullOrWhiteSpace(actionsText))
            return actions;
            
        var lines = actionsText.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        
        foreach (var line in lines)
        {
            var parts = line.Split('|', StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length < 2) continue;
            
            var actionName = parts[0].Trim();
            var actionType = parts[1].Trim();
            var parameters = new List<ParameterDescriptor>();
            
            if (parts.Length > 2 && !string.IsNullOrWhiteSpace(parts[2]))
            {
                var paramParts = parts[2].Split(',', StringSplitOptions.RemoveEmptyEntries);
                foreach (var paramPart in paramParts)
                {
                    var paramInfo = paramPart.Split(':', StringSplitOptions.RemoveEmptyEntries);
                    if (paramInfo.Length == 2)
                    {
                        parameters.Add(new ParameterDescriptor
                        {
                            ParamName = paramInfo[0].Trim(),
                            ParamType = paramInfo[1].Trim()
                        });
                    }
                }
            }
            
            actions.Add(new ComponentActionDescriptor
            {
                ActionName = actionName,
                ActionType = actionType,
                Parameters = parameters
            });
        }
        
        return actions;
    }

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(_generatedCode))
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", _generatedCode);
            Snackbar.Add("Code copied to clipboard!", Severity.Success);
        }
    }

    private async Task DownloadCode()
    {
        if (!string.IsNullOrEmpty(_generatedCode))
        {
            var fileName = $"{_componentName}.razor";
            await JS.InvokeVoidAsync("downloadFile", fileName, _generatedCode);
            Snackbar.Add($"Downloaded {fileName}", Severity.Success);
        }
    }
}