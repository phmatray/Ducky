@using System.Text
@using Ducky.CodeGen.WebApp.Models
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Code" Class="mr-2" Style="vertical-align: middle;" />
            Generated Code - @AppStoreName
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="3">
            <!-- Summary Section -->
            <MudPaper Class="pa-4" Elevation="0" Style="background-color: #e8f5e9;">
                <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                    <div>
                        <MudText Typo="Typo.body1">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" Class="mr-2" />
                            Successfully generated @GeneratedFiles.Count files
                        </MudText>
                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                            Your Ducky state management code is ready to use!
                        </MudText>
                    </div>
                    <MudStack Row="true" Spacing="2">
                        <MudButton Variant="Variant.Filled" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Download"
                                   OnClick="DownloadAll">
                            Download All
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.ContentCopy"
                                   OnClick="CopyAllToClipboard">
                            Copy All
                        </MudButton>
                    </MudStack>
                </MudStack>
            </MudPaper>

            <!-- File Tabs -->
            <MudTabs Elevation="0" Rounded="true" Centered="false" Color="Color.Primary" 
                     PanelClass="pa-0" HeaderPosition="TabHeaderPosition.Before"
                     Style="min-height: 500px;">
                @foreach (var fileGroup in GeneratedFiles.GroupBy(f => f.FileType).OrderBy(g => GetFileTypeOrder(g.Key)))
                {
                    <MudTabPanel Text="@GetFileTypeDisplay(fileGroup.Key)" 
                                 Icon="@GetFileTypeIcon(fileGroup.Key)"
                                 BadgeData="@fileGroup.Count()"
                                 BadgeColor="Color.Info">
                        <MudStack Spacing="3">
                            @foreach (var file in fileGroup.OrderBy(f => f.FileName))
                            {
                                <MudExpansionPanels Elevation="1">
                                    <MudExpansionPanel>
                                        <TitleContent>
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Style="width: 100%;">
                                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                                    <MudIcon Icon="@GetFileIcon(file.FileName)" Size="Size.Small" />
                                                    <MudText Typo="Typo.body1">@file.FileName</MudText>
                                                    <MudChip T="string" Size="Size.Small" Color="GetFileTypeColor(file.FileType)">
                                                        @file.FileType
                                                    </MudChip>
                                                </MudStack>
                                                <MudStack Row="true" Spacing="1" @onclick:stopPropagation="true">
                                                    <MudTooltip Text="Copy to clipboard">
                                                        <MudIconButton Icon="@Icons.Material.Filled.ContentCopy" 
                                                                       Size="Size.Small"
                                                                       OnClick="@(() => CopyToClipboard(file.Content, file.FileName))" />
                                                    </MudTooltip>
                                                    <MudTooltip Text="Download file">
                                                        <MudIconButton Icon="@Icons.Material.Filled.Download" 
                                                                       Size="Size.Small"
                                                                       OnClick="@(() => DownloadFile(file))" />
                                                    </MudTooltip>
                                                </MudStack>
                                            </MudStack>
                                        </TitleContent>
                                        <ChildContent>
                                            <MudPaper Class="pa-3" 
                                                      Style="background-color: #1e1e1e; border-radius: 8px; max-height: 600px; overflow: auto;">
                                                <pre style="margin: 0; color: #d4d4d4; font-family: 'Cascadia Code', 'Courier New', monospace; font-size: 13px; line-height: 1.5;">@file.Content</pre>
                                            </MudPaper>
                                        </ChildContent>
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            }
                        </MudStack>
                    </MudTabPanel>
                }
            </MudTabs>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<GeneratedFile> GeneratedFiles { get; set; } = new();
    [Parameter] public string AppStoreName { get; set; } = string.Empty;

    private void Close() => MudDialog.Close();

    private Color GetFileTypeColor(string fileType) => fileType switch
    {
        "State" => Color.Info,
        "Actions" => Color.Success,
        "Reducers" => Color.Primary,
        "Effects" => Color.Warning,
        "Duck" => Color.Secondary,
        "Configuration" => Color.Tertiary,
        _ => Color.Default
    };

    private string GetFileTypeIcon(string fileType) => fileType switch
    {
        "State" => Icons.Material.Filled.DataObject,
        "Actions" => Icons.Material.Filled.PlayArrow,
        "Reducers" => Icons.Material.Filled.Transform,
        "Effects" => Icons.Material.Filled.Bolt,
        "Duck" => Icons.Material.Filled.Category,
        "Configuration" => Icons.Material.Filled.Settings,
        _ => Icons.Material.Filled.Description
    };

    private string GetFileIcon(string fileName) => fileName.EndsWith(".cs") switch
    {
        true => Icons.Material.Filled.Code,
        _ => Icons.Material.Filled.Description
    };

    private int GetFileTypeOrder(string fileType) => fileType switch
    {
        "State" => 1,
        "Actions" => 2,
        "Reducers" => 3,
        "Effects" => 4,
        "Duck" => 5,
        "Configuration" => 6,
        _ => 99
    };

    private string GetFileTypeDisplay(string fileType) => fileType switch
    {
        "Duck" => "Ducks",
        _ => fileType
    };

    private async Task CopyToClipboard(string content, string fileName)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", content);
        Snackbar.Add($"Copied {fileName} to clipboard!", Severity.Success);
    }

    private async Task CopyAllToClipboard()
    {
        var allContent = CreateCombinedContent();
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", allContent);
        Snackbar.Add($"Copied all {GeneratedFiles.Count} files to clipboard!", Severity.Success);
    }

    private async Task DownloadFile(GeneratedFile file)
    {
        await JS.InvokeVoidAsync("downloadFile", file.FileName, file.Content);
        Snackbar.Add($"Downloaded {file.FileName}", Severity.Success);
    }

    private async Task DownloadAll()
    {
        var combinedContent = CreateCombinedContent();
        var fileName = $"{AppStoreName}_Generated_{DateTime.Now:yyyyMMdd_HHmmss}.txt";
        
        await JS.InvokeVoidAsync("downloadFile", fileName, combinedContent);
        Snackbar.Add($"Downloaded all files as {fileName}", Severity.Success);
    }

    private string CreateCombinedContent()
    {
        var sb = new StringBuilder();
        sb.AppendLine($"// Generated Ducky Code for: {AppStoreName}");
        sb.AppendLine($"// Generated on: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
        sb.AppendLine($"// Total files: {GeneratedFiles.Count}");
        sb.AppendLine(new string('=', 80));
        sb.AppendLine();
        
        foreach (var fileGroup in GeneratedFiles.GroupBy(f => f.FileType).OrderBy(g => GetFileTypeOrder(g.Key)))
        {
            sb.AppendLine($"// {fileGroup.Key} Files");
            sb.AppendLine(new string('-', 40));
            
            foreach (var file in fileGroup.OrderBy(f => f.FileName))
            {
                sb.AppendLine();
                sb.AppendLine($"// File: {file.FileName}");
                sb.AppendLine($"// Type: {file.FileType}");
                sb.AppendLine(new string('-', 40));
                sb.AppendLine(file.Content);
                sb.AppendLine();
            }
            
            sb.AppendLine();
        }
        
        return sb.ToString();
    }
}