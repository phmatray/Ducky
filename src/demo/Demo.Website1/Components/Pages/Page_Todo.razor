@page "/todo"
@inherits DuckyComponent<TodoState>

<PageTitle>Ducky - Todo List</PageTitle>
<hgroup>
  <p class="chapter">Example</p>
  <h1>Todo List</h1>
  <p>Creates an interactive todo list using the Ducky state management library for predictable state handling, featuring functionality to add, toggle, and remove todo items.</p>
</hgroup>

<section>
  <fieldset role="group">
    <input name="_newTodo" @bind="_newTodo" placeholder="Enter new todo" />
    <input type="submit" value="Add Todo" @onclick="CreateTodoItem" />
  </fieldset>
</section>

<section class="grid">
  <article>
    <header>Active Todos (@State.SelectActiveTodosCount())</header>
    <ul>
      @foreach (var todo in State.SelectActiveTodos())
      {
        <li @key="todo.Id">
          <label>
            <input type="checkbox" checked="@todo.IsCompleted" @onclick="() => ToggleTodoItem(todo.Id)"/>
            @todo.Title
            <button @onclick="() => DeleteTodoItem(todo.Id)">Delete</button>
          </label>
        </li>
      }
    </ul>
  </article>
  <article>
    <header>Completed Todos (@State.SelectCompletedTodosCount())</header>
    <ul>
      @foreach (var todo in State.SelectCompletedTodos())
      {
        <li @key="todo.Id">
          <label>
            <input type="checkbox" checked="@todo.IsCompleted" @onclick="() => ToggleTodoItem(todo.Id)"/>
            @todo.Title
            <button @onclick="() => DeleteTodoItem(todo.Id)">Delete</button>
          </label>
        </li>
      }
    </ul>
  </article>
</section>


@code {

  private string _newTodo = string.Empty;
  
  private void CreateTodoItem()
  {
    if (!string.IsNullOrWhiteSpace(_newTodo))
    {
      Dispatch(new CreateTodo(_newTodo));
      _newTodo = string.Empty;
    }
  }

  private void ToggleTodoItem(Guid id)
    => Dispatch(new ToggleTodo(id));

  private void DeleteTodoItem(Guid id)
    => Dispatch(new DeleteTodo(id));

}
