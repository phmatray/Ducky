@inherits DuckyComponent<NotificationsState>
@inject NavigationManager NavigationManager

<MudDrawer
  Open="@IsOpen"
  Anchor="Anchor.End"
  ClipMode="DrawerClipMode.Always"
  Width="420px"
  Elevation="2">
  
  <MudStack Spacing="0">
    <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="pa-4" Style="width: 100%">
      <MudText Typo="Typo.h6">Notifications</MudText>
      <MudTooltip Text="Mark all as read" Placement="Placement.Left" Arrow>
        <MudIconButton
          Icon="@Icons.Material.Filled.MarkChatRead"
          Color="Color.Default"
          Size="Size.Small"
          OnClick="MarkAllNotificationsAsRead"/>
      </MudTooltip>
    </MudStack>
    <MudDivider Class="mb-2"/>
  </MudStack>

  <MudList T="Notification" Dense>

    @if (HasUnreadNotifications)
    {
      @foreach (var notification in UnreadNotifications)
      {
        <MudListItem>
          <MudAlert
            Severity="@notification.Severity.ToMudSeverity()"
            Variant="Variant.Outlined"
            ShowCloseIcon
            CloseIconClicked="() => MarkNotificationAsRead(notification.Id)">
            <MudStack Spacing="0">
              <MudText>@notification.Message</MudText>
              <MudText Typo="Typo.caption">@notification.Timestamp.Humanize()</MudText>
              @if (notification is ExceptionNotification)
              {
                <MudButton
                  Variant="Variant.Outlined"
                  Class="mt-2"
                  OnClick="() => GoToErrorDetails(notification.Id)">
                  Show Details
                </MudButton>
              }
            </MudStack>
          </MudAlert>
        </MudListItem>
      }
    }
    else
    {
      <MudListItem>
        <MudAlert 
          Severity="Severity.Normal"
          Variant="Variant.Outlined">
          <MudStack Spacing="0">
            <MudText>There are no unread notifications.</MudText>
            <MudText Typo="Typo.caption">You're all caught up!</MudText>
          </MudStack>
        </MudAlert>
      </MudListItem>
    }
  </MudList>
</MudDrawer>

@code {

  [Parameter, EditorRequired]
  public bool IsOpen { get; set; }
  
  private ImmutableList<Notification> UnreadNotifications
    => State.SelectUnreadNotifications();
  
  private bool HasUnreadNotifications
    => State.SelectHasUnreadNotifications();
  
  private void MarkNotificationAsRead(Guid id)
  {
    Dispatch(new MarkNotificationAsRead(id));
  }

  private void MarkAllNotificationsAsRead()
  {
    Dispatch(new MarkAllNotificationsAsRead());
  }
  
  private void GoToErrorDetails(Guid id)
  {
    NavigationManager.NavigateTo($"/errors#{id}");
  }

}
