@inherits DuckyComponent<AppStore.Layout.LayoutState>

<MudAlert
  id="@Notification.Id"
  Severity="@Notification.Severity.ToMudSeverity()"
  CloseIconClicked="() => MarkNotificationAsRead(Notification.Id)">
  <MudStack Spacing="0" StretchItems="StretchItems.All">
    <MudText>
      <MudHighlighter Text="@Notification.Message" HighlightedText="@SearchTerm"/>
    </MudText>
    <MudText Typo="Typo.caption">
      Raised at <b>@Notification.Timestamp</b> @Separator @Notification.Timestamp.Humanize()
    </MudText>
    @if (Notification is ExceptionNotification error)
    {
    <MudText Class="mt-4">in Assembly: @error.Source</MudText>
    <MudPaper Class="mb-2">
      <MudText Typo="Typo.body2" Class="pa-4">
        <MudHighlighter
          Markup
          Text="@error.StackTrace?.Replace("\n", "<br>")"
          HighlightedText="@SearchTerm"/>
      </MudText>
    </MudPaper>
    }
    <MudStack AlignItems="AlignItems.Start">
      <MudButton
        Variant="Variant.Outlined"
        Class="mt-2"
        OnClick="() => MarkNotificationAsRead(Notification.Id)"
        StartIcon="@Icons.Material.Filled.MarkChatRead">
        Marks as Read
      </MudButton>
    </MudStack>
  </MudStack>
</MudAlert>

@code {
  
  private const string Separator = "â€¢";

  [Parameter, EditorRequired]
  public required Notification Notification { get; set; }

  [Parameter]
  public string SearchTerm { get; set; } = "";

  private void MarkNotificationAsRead(Guid id)
    => Dispatch(new MarkNotificationAsRead(id));
  
}
