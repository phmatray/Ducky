@page "/todo"
@using System.Collections.Immutable
@inherits RxComponentBase<TodoState, TodoReducer>

<h3>Todo List</h3>

<input @bind="_newTodo" placeholder="Enter new todo" />
<button @onclick="AddTodo">Add Todo</button>

<h4>Active Todos (@_activeTodosCount)</h4>
<ul>
  @foreach (var todo in _activeTodos)
  {
    <li @key="todo.Id">
      <input type="checkbox" checked="@todo.IsCompleted" @onclick="() => ToggleTodoItem(todo.Id)" />
      @todo.Title
      <button @onclick="() => RemoveTodoItem(todo.Id)">Remove</button>
    </li>
  }
</ul>

<h4>Completed Todos (@_completedTodosCount)</h4>
<ul>
  @foreach (var todo in _completedTodos)
  {
    <li @key="todo.Id">
      <input type="checkbox" checked="@todo.IsCompleted" @onclick="() => ToggleTodoItem(todo.Id)"/>
      @todo.Title
      <button @onclick="() => RemoveTodoItem(todo.Id)">Remove</button>
    </li>
  }
</ul>

@code {
  private string _newTodo = string.Empty;
  private IImmutableList<TodoItem> _activeTodos = [];
  private int _activeTodosCount;
  private IImmutableList<TodoItem> _completedTodos = [];
  private int _completedTodosCount;

  protected override void OnInitialized()
  {
    SubscribeToState(state => state.ActiveTodos, _activeTodos);
    SubscribeToState(state => state.ActiveTodosCount, _activeTodosCount);
    SubscribeToState(state => state.CompletedTodos, _completedTodos);
    SubscribeToState(state => state.CompletedTodosCount, _completedTodosCount);
  }

  private void AddTodo()
  {
    if (!string.IsNullOrWhiteSpace(_newTodo))
    {
      Dispatch(new AddTodo(_newTodo));
      _newTodo = string.Empty;
    }
  }

  private void ToggleTodoItem(Guid id)
    => Dispatch(new ToggleTodo(id));

  private void RemoveTodoItem(Guid id)
    => Dispatch(new RemoveTodo(id));
}