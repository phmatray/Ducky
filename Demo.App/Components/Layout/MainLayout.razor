@inherits R3duxLayout<LayoutState>

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />

<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<footer>
  <hr/>
  <div class="container">
    <p>Made with ❤️ by Philippe Matray</p>
    <MudButton Variant="Variant.Outlined">Open Modal</MudButton>
  </div>
</footer>

<MudLayout>
  <MudAppBar Elevation="1">
    <MudIconButton
      Icon="@Icons.Material.Filled.Menu"
      Color="Color.Inherit" 
      Edge="Edge.Start"
      OnClick="@((e) => DrawerToggle())" />
    <MudText Typo="Typo.h5" Class="ml-3">@State.SelectFullTitle()</MudText>
    <MudSpacer />
    <MudIconButton
      Icon="@(DarkLightModeButtonIcon)"
      Color="Color.Inherit"
      OnClick="@DarkModeToggle" />
    <MudIconButton
      Icon="@Icons.Material.Filled.MoreVert"
      Color="Color.Inherit"
      Edge="Edge.End"
      @onclick="OpenModal" />
  </MudAppBar>
  <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
    <NavMenu />
  </MudDrawer>
  <MudMainContent Class="mt-4 pa-4">
    @Body
  </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
  An unhandled error has occurred.
  <a href="" class="reload">Reload</a>
  <a class="dismiss">🗙</a>
</div>

<dialog open="@State.IsModalOpen">
  <article>
    <header>
      <button aria-label="Close" rel="prev" @onclick="CloseModal"></button>
      <p>
        <strong>🗓️ Thank You for Registering!</strong>
      </p>
    </header>
    <p>
      We're excited to have you join us for our
      upcoming event. Please arrive at the museum
      on time to check in and get started.
    </p>
    <ul>
      <li>Date: Saturday, April 15</li>
      <li>Time: 10:00am - 12:00pm</li>
    </ul>
  </article>
</dialog>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private void OpenModal()
      => Dispatch(new OpenModal());

    private void CloseModal()
      => Dispatch(new CloseModal());
}
