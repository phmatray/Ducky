@page "/timer"
@inherits R3duxComponent<TimerState>

<PageTitle>R3dux - Timer</PageTitle>
<MudStack>
  <MudText Typo="Typo.subtitle1">Example</MudText>
  <MudText Typo="Typo.h3">Timer</MudText>
  <MudText Typo="Typo.body1">
    Creates an interactive timer using the R3dux state management library 
    for predictable state handling, featuring start, stop, and reset functionality.
  </MudText>
</MudStack>

<article>
  Time: <strong>@Time</strong> seconds
  <footer>
    <MudButtonGroup Variant="Variant.Outlined">
      <MudButton Variant="Variant.Outlined" OnClick="ToggleTimer">@(IsRunning ? "Stop" : "Start")</MudButton>
      <MudButton Variant="Variant.Outlined" OnClick="ResetTimer">Reset</MudButton>
    </MudButtonGroup>
  </footer>
</article>

<div class="mt-4">
  <AnalogClock/>
</div>

@code {

  private int Time => State.Time;
  private bool IsRunning => State.IsRunning;

  protected override void OnInitialized()
  {
    // TODO: Avoid calling base.OnInitialized() if not needed
    base.OnInitialized();
    
    if (IsRunning)
    {
      StartTimer();
    }
  }
  
  private void ToggleTimer()
  {
    if (IsRunning)
    {
      StopTimer();
    }
    else
    {
      StartTimer();
    }
  }

  private void ResetTimer()
  {
    Dispatch(new ResetTimer());
    StopTimer();
  }

  private void StartTimer()
    => Dispatch(new StartTimer());

  private void StopTimer()
    => Dispatch(new StopTimer());

}
