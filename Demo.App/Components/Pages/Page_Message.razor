@page "/message"
@inherits R3duxComponent<MessageState>

<PageTitle>R3dux - Message</PageTitle>

<MudGrid>
  <MudItem xs="12">
    <MudStack>
      <MudText Typo="Typo.subtitle1">Example</MudText>
      <MudText Typo="Typo.h3">Message</MudText>
      <MudText Typo="Typo.body1">
        Creates a simple message example using the R3dux state management library for predictable state handling,<br/>
        featuring a button to set a new message.
      </MudText>
    </MudStack>
  </MudItem>

  <MudItem xs="12">
    <MudButtonGroup Variant="Variant.Outlined">
      <MudButton @onclick="SetMessage">Set New Message</MudButton>
      <MudButton @onclick="AppendMessage">Append Message</MudButton>
      <MudButton @onclick="ClearMessage">Clear Message</MudButton>
    </MudButtonGroup>
  </MudItem>
  
  <MudItem xs="12">
    <MudSimpleTable>
      <tbody>
      <tr>
        <td style="width: 25%">Message</td>
        <td><b>@State.Message</b></td>
      </tr>
      <tr>
        <td>Character count</td>
        <td><b>@State.SelectMessageLength()</b></td>
      </tr>
      <tr>
        <td>Reverse</td>
        <td><b>@State.SelectMessageInReverse()</b></td>
      </tr>
      </tbody>
    </MudSimpleTable>
  </MudItem>
</MudGrid>

@code {

  private void SetMessage()
    => Dispatch(new SetMessage("New message from Blazor!"));

  private void AppendMessage()
    => Dispatch(new AppendMessage(" Appended text"));

  private void ClearMessage()
    => Dispatch(new ClearMessage());

}