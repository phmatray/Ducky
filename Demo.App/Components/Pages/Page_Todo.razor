@page "/todo"
@inherits R3duxComponent<TodoState>

<PageTitle>R3dux - Todo List</PageTitle>

<MudGrid>
  <MudItem xs="12">
    <MudStack>
      <MudText Typo="Typo.subtitle1">Example</MudText>
      <MudText Typo="Typo.h3">Todo List</MudText>
      <MudText Typo="Typo.body1">
        Creates an interactive todo list using the R3dux state management library for predictable state handling,<br/>
        featuring functionality to add, toggle, and remove todo items.
      </MudText>
    </MudStack>
  </MudItem>

  <MudItem xs="12" lg="6">
    <MudStack>
      <div>
        <MudBadge Content="@ActiveTodosCount" Color="Color.Primary" Class="mt-5">
          <MudText Typo="Typo.h5">Active Todos</MudText>
        </MudBadge>
      </div>
      
      <MudPaper>
        @if (!HasActiveTodos)
        {
          <MudText Typo="Typo.h6" Class="ma-4">
            No active todos - add a new todo item to get started!
          </MudText>
        }
        <MudList T="TodoItem">
          @foreach (var todo in ActiveTodos)
          {
            <MudListItem @key="todo.Id">
              <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudIconButton Icon="@Icons.Material.Filled.CheckBoxOutlineBlank" OnClick="() => ToggleTodoItem(todo.Id)"/>
                <MudText>@todo.Title</MudText>
                <MudSpacer/>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteTodoItem(todo.Id)">Delete</MudButton>
              </MudStack>
            </MudListItem>
          }
        </MudList>
      </MudPaper>
      
      <MudCard>
        <MudCardContent>
          <MudTextField
            @bind-Value="_newTodo"
            Variant="Variant.Filled"
            Label="New Todo"
            HelperText="Type a new todo item and click 'Add Todo' to add it to the list."/>
        </MudCardContent>
        <MudCardActions>
          <MudButton Variant="Variant.Outlined" OnClick="CreateTodoItem" Class="ml-auto mr-2 mb-2">Add Todo</MudButton>
        </MudCardActions>
      </MudCard>
    </MudStack>
  </MudItem>
  
  <MudItem xs="12" lg="6">
    <MudStack>
      <div>
        <MudBadge Content="@CompletedTodosCount" Color="Color.Secondary" Class="mt-5">
          <MudText Typo="Typo.h5">Completed Todos</MudText>
        </MudBadge>
      </div>
      <MudPaper>
        <MudList T="TodoItem">
          @foreach (var todo in CompletedTodos)
          {
            <MudListItem @key="todo.Id">
              <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudIconButton Icon="@Icons.Material.Filled.CheckBox" OnClick="() => ToggleTodoItem(todo.Id)"/>
                <MudText>@todo.Title</MudText>
                <MudSpacer/>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeleteTodoItem(todo.Id)">Delete</MudButton>
              </MudStack>
            </MudListItem>
          }
        </MudList>
      </MudPaper>
    </MudStack>
  </MudItem>
</MudGrid>


@code {

  private string _newTodo = string.Empty;
  
  private ImmutableList<TodoItem> ActiveTodos
    => State.SelectActiveTodos();

  private int ActiveTodosCount
    => State.SelectActiveTodosCount();

  private bool HasActiveTodos
    => State.SelectHasActiveTodos();
  
  private ImmutableList<TodoItem> CompletedTodos
    => State.SelectCompletedTodos();
  
  private int CompletedTodosCount
    => State.SelectCompletedTodosCount();
  
  private void CreateTodoItem()
  {
    if (!string.IsNullOrWhiteSpace(_newTodo))
    {
      Dispatch(new CreateTodo(_newTodo));
      _newTodo = string.Empty;
    }
  }

  private void ToggleTodoItem(Guid id)
    => Dispatch(new ToggleTodo(id));

  private void DeleteTodoItem(Guid id)
    => Dispatch(new DeleteTodo(id));

}