@page "/timer"
@inherits R3duxComponent<TimerState>

<PageTitle>R3dux - Timer</PageTitle>
<hgroup>
  <p class="chapter">Example</p>
  <h1>Timer</h1>
  <p>Creates an interactive timer using the R3dux state management library for predictable state handling, featuring start, stop, and reset functionality.</p>
</hgroup>

<article>
  Time: <strong>@Time</strong> seconds
</article>

<div role="group">
  <button @onclick="ToggleTimer">@(IsRunning ? "Stop" : "Start")</button>
  <button @onclick="Reset">Reset</button>
</div>

@code {

  private int Time => State.Time;
  private bool IsRunning => State.IsRunning;
  
  private System.Timers.Timer? _timer;

  protected override void OnInitialized()
  {
    if (IsRunning)
    {
      StartTimer();
    }
  }

  private void StartTimer()
  {
    if (_timer == null)
    {
      _timer = new System.Timers.Timer(1000);
      _timer.Elapsed += OnTimerElapsed;
      _timer.Start();
    }
  }

  private void StopTimer()
  {
    if (_timer != null)
    {
      _timer.Stop();
      _timer.Elapsed -= OnTimerElapsed;
      _timer.Dispose();
      _timer = null;
    }
  }

  private async void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
  {
    await InvokeAsync(() => Dispatch(new Tick()));
  }

  private void ToggleTimer()
  {
    if (IsRunning)
    {
      Dispatch(new StopTimer());
      StopTimer();
    }
    else
    {
      Dispatch(new StartTimer());
      StartTimer();
    }
  }

  private void Reset()
  {
    Dispatch(new ResetTimer());
    StopTimer();
  }

}
