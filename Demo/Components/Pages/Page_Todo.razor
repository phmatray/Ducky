@page "/todo"
@inherits R3duxComponent<TodoState>

<PageTitle>R3dux - Todo List</PageTitle>
<hgroup>
  <p class="chapter">Example</p>
  <h1>Todo List</h1>
  <p>Creates an interactive todo list using the R3dux state management library for predictable state handling, featuring functionality to add, toggle, and remove todo items.</p>
</hgroup>

<input @bind="_newTodo" placeholder="Enter new todo" />
<button @onclick="CreateTodoItem">Add Todo</button>

<h4>Active Todos (@State.SelectActiveTodosCount())</h4>
<ul>
  @foreach (var todo in State.SelectActiveTodos())
  {
    <li @key="todo.Id">
      <input type="checkbox" checked="@todo.IsCompleted" @onclick="() => ToggleTodoItem(todo.Id)" />
      @todo.Title
      <button @onclick="() => DeleteTodoItem(todo.Id)">Remove</button>
    </li>
  }
</ul>

<h4>Completed Todos (@State.SelectCompletedTodosCount())</h4>
<ul>
  @foreach (var todo in State.SelectCompletedTodos())
  {
    <li @key="todo.Id">
      <input type="checkbox" checked="@todo.IsCompleted" @onclick="() => ToggleTodoItem(todo.Id)"/>
      @todo.Title
      <button @onclick="() => DeleteTodoItem(todo.Id)">Delete</button>
    </li>
  }
</ul>

@code {

  private string _newTodo = string.Empty;
  
  private void CreateTodoItem()
  {
    if (!string.IsNullOrWhiteSpace(_newTodo))
    {
      Dispatch(new CreateTodo(_newTodo));
      _newTodo = string.Empty;
    }
  }

  private void ToggleTodoItem(Guid id)
    => Dispatch(new ToggleTodo(id));

  private void DeleteTodoItem(Guid id)
    => Dispatch(new DeleteTodo(id));

}