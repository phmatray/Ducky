@page "/movies"
@inherits R3duxComponent<MovieState>

<PageTitle>R3dux - Movies</PageTitle>
<hgroup>
  <p class="chapter">Example</p>
  <h1>Movies</h1>
  <p>
    Creates a simple movie example using the R3dux state management library for predictable state handling,
    featuring loading state and error handling for displaying movies.
  </p>
</hgroup>

<article>
  <header>5 more recent movies</header>
  @if (ErrorMessage != null)
  {
    <p><strong>@ErrorMessage</strong></p>
  }
  else if (IsLoading)
  {
    <p><strong>Loading movies...</strong></p>
  }
  else
  {
    <table>
      <thead>
      <tr>
        <th>Title</th>
        <th>Director</th>
        <th>Year</th>
      </tr>
      </thead>
      <tbody>
      @foreach (var movie in Movies)
      {
        <tr>
          <td>@movie.Title</td>
          <td>@movie.Director</td>
          <td>@movie.Year</td>
        </tr>
      }
      </tbody>
    </table>
  }
  <footer>
    @if (IsLoading)
    {
      <button aria-busy="true" disabled>Please wait...</button>
    }
    else
    {
      <button @onclick="LoadMovies">Reload Movies</button>
    }
  </footer>
</article>


@code {
  
  private IImmutableList<Movie> Movies
    => State.SelectMoviesByYear();
  
  private bool IsLoading
    => State.IsLoading;
  
  private string IsLoadingString
    => IsLoading ? "true" : "false";
  
  private string? ErrorMessage
    => State.ErrorMessage;

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      Console.WriteLine("First render - loading movies...");
      Dispatch(new LoadMovies());
    }
  }
  
  private void LoadMovies()
    => Dispatch(new LoadMovies());

}